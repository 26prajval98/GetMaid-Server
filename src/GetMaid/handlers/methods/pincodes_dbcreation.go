package methods

import (
	"GetMaid/database"
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"sync"
)

type Distance struct {
	Distance float64 `json:"distance"`
}

var (
	pincodeinsert *sql.Stmt
	UqPc          []string
)

func UniquePincodes(pincodes []string) []string {
	pc := make(map[string]bool)

	for _, entry := range pincodes {
		if _, value := pc[entry]; !value {
			pc[entry] = true
			UqPc = append(UqPc, entry)
		}
	}
	return UqPc
}

func FindDis(body []byte) Distance {
	var s Distance
	err := json.Unmarshal([]byte(body), &s)
	if err != nil {
		fmt.Println(err.Error())
	}
	return s
}

func initA() {
	pincodes = []string{
		"560079",
		"560063",
		"560030",
		"560034",
		"560007",
		"560007",
		"560092",
		"560024",
		"562106",
		"562106",
		"560045",
		"560003",
		"560050",
		"562107",
		"560064",
		"560047",
		"560026",
		"560086",
		"560002",
		"560070",
		"560064",
		"560073",
		"562149",
		"560053",
		"560050",
		"560085",
		"560043",
		"562149",
		"560017",
		"560001",
		"560002",
		"560002",
		"560009",
		"560002",
		"560025",
		"560001",
		"560083",
		"560076",
		"560026",
		"560004",
		"560002",
		"560079",
		"560086",
		"560103",
		"560046",
		"562106",
		"562157",
		"560010",
		"560049",
		"562107",
		"560049",
		"560056",
		"560068",
		"560001",
		"560026",
		"560093",
		"560025",
		"560064",
		"560002",
		"560018",
		"560018",
		"560040",
		"560053",
		"560097",
		"562157",
		"560061",
		"562130",
		"562130",
		"560001",
		"560050",
		"560026",
		"560067",
		"560045",
		"560036",
		"560029",
		"562149",
		"562157",
		"560062",
		"560037",
		"560071",
		"562125",
		"560016",
		"560001",
		"560100",
		"560005",
		"560065",
		"560019",
		"560019",
		"560021",
		"560085",
		"560022",
		"560026",
		"560026",
		"560013",
		"560087",
		"560013",
		"560024",
		"560008",
		"560051",
		"560102",
		"560104",
		"562125",
		"562106",
		"560024",
		"562106",
		"560001",
		"560068",
		"560048",
		"560043",
		"560085",
		"560030",
		"562106",
		"560076",
		"560008",
		"562157",
		"560094",
		"560066",
		"562106",
		"560038",
		"560038",
		"560010",
		"560085",
		"560078",
		"560006",
		"560064",
		"560013",
		"560014",
		"560013",
		"560015",
		"560043",
		"560041",
		"560070",
		"560069",
		"560011",
		"560005",
		"560066",
		"562106",
		"560078",
		"560079",
		"560009",
		"560020",
		"560084",
		"562130",
		"560067",
		"560067",
		"560043",
		"560015",
		"560079",
		"560067",
		"562149",
		"560096",
		"560085",
		"560098",
		"560034",
		"560064",
		"560092",
		"560062",
		"560034",
		"560034",
		"560095",
		"560077",
		"560036",
		"560016",
		"562125",
		"560078",
		"560074",
		"560037",
		"560004",
		"560001",
		"560084",
		"560054",
		"560011",
		"560068",
		"560023",
		"560048",
		"560086",
		"560001",
		"560033",
		"560056",
		"560003",
		"560055",
		"560033",
		"560037",
		"562106",
		"560033",
		"560054",
		"560004",
		"562107",
		"560049",
		"560067",
		"560076",
		"560055",
		"560076",
		"560054",
		"560049",
		"560025",
		"560099",
		"560087",
		"560017",
		"560067",
		"560072",
		"560073",
		"560045",
		"560096",
		"560019",
		"560002",
		"560001",
		"560039",
		"562107",
		"560002",
		"560075",
		"560021",
		"560032",
		"560070",
		"560003",
		"560087",
		"560004",
		"560058",
		"560058",
		"560058",
		"560032",
		"560094",
		"560010",
		"560010",
		"560010",
		"560064",
		"560098",
		"560001",
		"560021",
		"560066",
		"560045",
		"560016",
		"560037",
		"560025",
		"560059",
		"560080",
		"560092",
		"562106",
		"560067",
		"560027",
		"562125",
		"560012",
		"560020",
		"560004",
		"560027",
		"562106",
		"560064",
		"560042",
		"560008",
		"560002",
		"560021",
		"560034",
		"560084",
		"560050",
		"560009",
		"560061",
		"560003",
		"562157",
		"562130",
		"560029",
		"560049",
		"562106",
		"560041",
		"560006",
		"560028",
		"560056",
		"562106",
		"560087",
		"560052",
		"560003",
		"560045",
		"560001",
		"562157",
		"560097",
		"560040",
		"560040",
		"560078",
		"560017",
		"560049",
		"560004",
		"560091",
		"560018",
		"560047",
		"560003",
		"560064",
		"560066",
		"560027",
		"562107",
		"560070",
		"560078",
		"560064",
		"560064",
		"560037",
		"560022",
		"560022",
	}

	Uniquepins := UniquePincodes(pincodes)

	var e error
	db := database.GetDb()

	//noinspection SqlResolve
	pincodeinsert, e = db.Prepare(`INSERT INTO pincodes(Pincode1,Pincode2) VALUES ( ?, ?)`)

	var wgUp sync.WaitGroup

	wgUp.Add(len(Uniquepins) * len(Uniquepins))
	for i, p1 := range Uniquepins {
		go func(n int, pin string) {
			for j, p2 := range Uniquepins {
				go func(n, n_ int, pin, pin_ string) {
					w, err := http.Get("https://getmaid-maps.herokuapp.com/distance/" + pin + "/" + pin_)

					if err != nil {
						log.Fatal("Cannot get longitude and latitude for given pincode", pin, pin_)
					}

					responseData, err := ioutil.ReadAll(w.Body)

					if err != nil {
						panic(err.Error())
					}
					s := FindDis(responseData)

					temp := s.Distance
					if temp < 3 {
						_, e = pincodeinsert.Exec(pin, pin_)
					}
					if e != nil {
						panic(e.Error())
					}
					fmt.Println(n, n_)
					wgUp.Done()
				}(n, j, pin, p2)
			}
		}(i, p1)
	}

	wgUp.Wait()
}
